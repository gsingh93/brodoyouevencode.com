<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bro, Do You Even Code?]]></title>
  <link href="http://brodoyouevencode.com/atom.xml" rel="self"/>
  <link href="http://brodoyouevencode.com/"/>
  <updated>2013-08-29T13:49:51-04:00</updated>
  <id>http://brodoyouevencode.com/</id>
  <author>
    <name><![CDATA[Gulshan Singh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XSS Tutorial]]></title>
    <link href="http://brodoyouevencode.com/posts/xss-tutorial/"/>
    <updated>2013-06-10T08:25:00-04:00</updated>
    <id>http://brodoyouevencode.com/posts/xss-tutorial</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>An XSS attack allows an attacker to run client-side scripts on webpages viewed by other users. In this article, you&rsquo;ll learn about the different types of XSS attacks, apply these attacks in your own demo page, and learn how to prevent them. I&rsquo;d recommend you set these test pages up on your own servers to understand them better. A quick Google search will get you started with that.</p>

<!--more-->


<h2>Basic XSS Example</h2>

<p>Imagine I&rsquo;m adding search functionality to my site. My search page looks something like the following,</p>

<pre><code>    &lt;html&gt;
       &lt;body&gt;
          &lt;form&gt;
             &lt;input type="text" name="query"&gt;
             &lt;input type="submit"&gt;
          &lt;/form&gt;
       &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<p>Now when the user types in a search query and clicks submit, the form is posted to the page and a PHP script processes the query,</p>

<pre><code>&lt;html&gt;
  &lt;body&gt;
    &lt;form&gt;
      &lt;?php
        if (array_key_exists('query', $_GET)) {
          $query = $_GET['query'];
          echo 'Displaying search results for query: ' . $query . '&lt;br&gt;';
        }
      ?&gt;
      &lt;input type="text" name="query"&gt;
      &lt;input type="submit"&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Try this out on a test page and see what happens. When you search for something like &ldquo;Gulshan Singh&rdquo;, you get a webpage that says, &ldquo;Displaying search results for query: Gulshan Singh&rdquo;. Now enter the query &ldquo;<code>&lt;b&gt;Gulshan Singh&lt;/b&gt;</code>&rdquo; instead. You should still see the same text displayed on the page, but now the text &ldquo;Gulshan Singh&rdquo; should be in bold. What happened? Take a look at the HTML source of the resulting page. The exact text we enter into the search box gets written to the page, meaning that we can write our own HTML, and consequently our own JavaScript, to the page.</p>

<p>So what malicious JavaScript could we execute on this page? One common XSS attack is cookie theft. Go back to the test page and search for <code>&lt;script&gt;document.cookie="username=gsingh";alert(document.cookie);&lt;/script&gt;</code>. If you&rsquo;re using a browser that doesn&rsquo;t protect against XSS attacks at the time of this writing (Firefox, IE, but not Chrome), then you should see an alert box popup with the text <code>"username=gsingh"</code>. By using XSS, you were able to access and display your cookies. In theory, the script could do much more. It could send the cookies in an email to any email account, or instead of messing with cookies, it could run a script that could DDOS attack any site you wanted it to. Note that Chrome prevents XSS attacks, so in order to get the test page to work with Chrome you need to put the following code at the top of the page,</p>

<pre><code>&lt;?php
    header('X-XSS-Protection: 0');
?&gt;
</code></pre>

<p>This sends an HTTP Header to the server to disable XSS filtering. In real world scenarios we obviously can&rsquo;t do this, and we&rsquo;re left to look for other security holes.</p>

<p>You may be wondering how any of this will help if you can only insert the malicious XSS vector into your own browser. Search something on our test page and look at the URL. Our query is in the page URL since we&rsquo;re using an HTTP GET request, and so we can send this URL to anyone and have the JavaScript execute on their page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WLAN Security Primer 1]]></title>
    <link href="http://brodoyouevencode.com/posts/wlan-security-primer-1/"/>
    <updated>2013-06-10T08:23:00-04:00</updated>
    <id>http://brodoyouevencode.com/posts/wlan-security-primer-1</id>
    <content type="html"><![CDATA[<h3>Setting Up Your Environment</h3>

<p><a href="http://www.securitytube.net/video/1756">Part 1</a> of the series is fairly short. Vivek covers the motivation for WLAN security, the software and hardware you&rsquo;ll need for the rest of the videos, and goes through a complete installation and configuration of them.</p>

<!--more-->


<p>In summary, you&rsquo;ll need to have <a href="http://www.backtrack-linux.org/">BackTrack</a> setup on as a virtual machine or a partition and you&rsquo;ll need a network card capable of packet sniffing and packet injection. Vivek uses the Alfa Networks AWUS036H USB network card because it&rsquo;s cheap and already well integrated into BackTrack. The version of BackTrack used in the videos is version four, but any higher version should work just fine. If you have any issues, you can check out <a href="http://www.securitytube.net/video/1756">the video</a> for a complete walk through.</p>

<p><a href="http://www.securitytube.net/video/1757">Part 2</a> of the series is where it starts to get a bit more interesting. This video covers channels, bands, and how to get started sniffing. Start off by plugging in your network card and starting up BackTrack. To check if the network card is connected, type <code>ifconfig -a</code> in the terminal. You should see something like <code>wlan0</code> show up. While this interface may be connected, it may not be up an running. All running network interfaces can be seen with <code>ifconfig</code>. If you don&rsquo;t see <code>wlan0</code> in that list, you&rsquo;ll need to run <code>ifconfig wlan0 up</code> to bring that interface up (<code>ifconfig wlan0 down</code> will do the opposite and bring that interface down).</p>

<p>Now that you&rsquo;re card is connected and running, we&rsquo;re going to need to create a virtual interface on top of it. The reason for this is because we need to sniff on a network interface that&rsquo;s in <a href="http://en.wikipedia.org/wiki/Monitor_mode">monitor</a> mode, which means that it accepts all packets on the network (instead of just ones directed to it). It&rsquo;s a virtual interface because it isn&rsquo;t created by it&rsquo;s own physical card. To create this interface, we&rsquo;re going to use a program called airmon-ng. If you type <code>airmon-ng</code> in the terminal you&rsquo;ll see a list of wireless interfaces (you should see wlan0 there). If you type <code>airmon-ng start wlan0</code>, you&rsquo;ll create a virtual interface in monitor mode (in my case it&rsquo;s called <code>mon0</code>). If you type <code>airmon-ng</code> again, you&rsquo;ll see the new <code>mon0</code> interface in the list of wireless interfaces. You&rsquo;ll also see it if you type <code>ifconfig</code> again. Finally, if you type <code>iwconfig</code> you&rsquo;ll see both wlan0 and mon0 there, but in information about mon0, you&rsquo;ll see some text that says &ldquo;Mode: monitored&rdquo;. You&rsquo;ll also notice that the MAC address of both interfaces (HWaddr in BT) is the same for both cards. This is because mon0 is a virtual interface on top of the physical interface wlan0.</p>

<p>You can go ahead and start Wireshark now by typing <code>wireshark &amp;</code>. If you go to Capture &ndash;> Interfaces, you&rsquo;ll see mon0 in the list. Click &ldquo;Start&rdquo; and you Wireshark should start capturing packets on that interface.</p>

<h3>Bands and Channels</h3>

<p>Now for a little theory. When your WiFi card is communicating with other computers and networks, it&rsquo;s doing so using a particular frequency. Some example frequencies are 2.4GHz, 3.6GHz, and 5GHz, and these frequencies are called <a href="http://en.wikipedia.org/wiki/Band_(radio">bands</a>). In each band or frequency ranges, there are a lot of different frequencies the WiFi card can operate at. This range of frequencies is broken into subdivisions called <a href="http://en.wikipedia.org/wiki/List_of_WLAN_channels">channels</a>. So for example, channel 1 in the 2.4 GHz band operates between 2.401 and 2.423 GHz and channel 2 operates between 2.406 and 2.428 GHz (You can find all of the range frequencies <a href="http://en.wikipedia.org/wiki/802.11b">here</a>. Now why is this important? Well, when you&rsquo;re sniffing a WiFi network, your network card can only be on one channel at a time. In order to sniff multiple channels at the same time, your card either needs to have multiple radios to talk to listen to multiple channels (unlikely) or you need to hop between each channel (this will result in some packet loss).</p>

<h3>airodump-ng</h3>

<p>BackTrack comes with a nice tool that allows us to hop between channels easily. Airodump-ng is a tool that allows us to select which bands and channels our card should operate on. If we run the command <code>airodump-ng mon0 --band bg</code>, our interface will hop between all of the channels on the b and g bands (2.4 GHz). If you open up Wireshark now, the traffic you see will be from each channel of the band. In the next articles, you&rsquo;ll learn what all of the information on that screen means.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[STS Level 1]]></title>
    <link href="http://brodoyouevencode.com/posts/sts-io-level-1/"/>
    <updated>2013-06-10T08:19:00-04:00</updated>
    <id>http://brodoyouevencode.com/posts/sts-io-level-1</id>
    <content type="html"><![CDATA[<p>We start the level by SSHing into the STS IO server,</p>

<p>   ssh -p2224 <a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#x6c;&#101;&#x76;&#101;&#108;&#49;&#x40;&#105;&#111;&#46;&#115;&#109;&#x61;&#115;&#x68;&#116;&#x68;&#x65;&#115;&#116;&#97;&#99;&#107;&#46;&#x6f;&#114;&#103;">&#108;&#101;&#118;&#101;&#108;&#x31;&#x40;&#105;&#x6f;&#x2e;&#115;&#109;&#x61;&#115;&#104;&#x74;&#104;&#x65;&#x73;&#116;&#97;&#99;&#107;&#46;&#111;&#114;&#x67;</a></p>

<!--more-->


<p>The password is <code>level1</code>. We start off in the <code>/home/level1/</code> folder. If you read one of the README files (<code>less README</code>, <code>vi README</code>, or <code>cat README</code>), you can read about how the wargame works. In short, you start off on level 1 and try to exploit the applications in the <code>/levels</code> directory. If you can exploit them and get the password needed to run the application, you&rsquo;ll have an effective user id as the next level (this works using <a href="http://en.wikipedia.org/wiki/Setuid">setuid</a> access rights; you can run <code>ls -l /levels</code> and see that the executable byte of the owner permissions is set to an &rsquo;s&#8217; instead of an &lsquo;x&rsquo;). With a higher effective user id, you can go to that users home directory and access the .pass file, which contains the password for the next level. Then you can SSH in as that user using this password.</p>

<p>There really aren&rsquo;t any tricks to level one. If you don&rsquo;t have prior experience with Linux or with these types of challenges you&rsquo;re out of luck. Start of by running the level01 application to see what happens,</p>

<pre><code>  level1@io:/levels$ ./level01
  Usage: ./level01 &lt;password&gt;
</code></pre>

<p>To get the password, run the command</p>

<p>   level1@io:/levels$ strings level01</p>

<p>and look at the output. The string command outputs all of the printable characters from files, including executables. You&rsquo;ll see the obvious password, <code>omgpassword</code>. Now run the program again with this password,</p>

<pre><code>level1@io:/levels$ ./level01 omgpassword
Win.
sh-4.1$
</code></pre>

<p>You&rsquo;ll see a bash prompt. If you type <code>id</code> you can see that your effective user id is now level2. The next step is to increase your real user id. Go to /home/level2 and run <code>cat .pass</code>. I&rsquo;ve put the password below
WE5aVWRwYPhX</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building the AOSP Settings App]]></title>
    <link href="http://brodoyouevencode.com/posts/building-aosp-settings-app/"/>
    <updated>2013-02-27T00:00:00-05:00</updated>
    <id>http://brodoyouevencode.com/posts/building-aosp-settings-app</id>
    <content type="html"><![CDATA[<p>Unlike some of the other AOSP apps, the settings app requires internal libraries, and thus can not be built by simply importing the project into Eclipse. After a little help on the Android Building mailing list, I was able to figure out how to build it.</p>

<p>// TODO</p>
]]></content>
  </entry>
  
</feed>
